name: Build, test and deploy

on: [ push ]

jobs:
  buildAndTest:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python 3.10
        uses: actions/setup-python@v1
        with:
          python-version: 3.10

      - name: Cache pip
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/*requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install wheel
          python -m pip install -r requirements.txt
          python -m pip install -r extra_requirements.txt

      - name: Scanning for security issues
        run: |
          python -m bandit -c pyproject.toml -r .

      - name: Checking the code format
        run: |
          python -m black --check .

      - name: Checking for lint errors
        run: |
          python -m pylint --recursive y .

      - name: Running tests
        run: |
          python -m pytest tests/

      - name: Building Docker image
        run: |
          docker build -t python-template-repository .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

  deploy:
    if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/prod') }}
    runs-on: ubuntu-latest
    needs: buildAndTest

    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get branch name
        id: get-branch
        shell: bash
        env:
          BRANCH: ${{ github.ref }}
        run: |
          echo "::set-output name=branch::${GITHUB_REF#refs/heads/}"
          if [ "$BRANCH" = "refs/heads/dev" ]; then
            echo "::set-output name=tag::dev"
          elif [ "$BRANCH" = "refs/heads/staging" ]; then
            echo "::set-output name=tag::staging"
          elif [ "$BRANCH" = "refs/heads/prod" ]; then
            echo "::set-output name=tag::prod"
          else
            exit 1
          fi

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: python-template-repository
          IMAGE_TAG: ${{ steps.get-branch.outputs.branch }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
